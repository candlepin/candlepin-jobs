apply plugin: 'groovy'

sourceSets {
  jobs {
    groovy {
      srcDirs 'src/jobs'
      compileClasspath += main.compileClasspath
    }
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}

repositories {
  mavenCentral()
  maven { url 'http://repo.jenkins-ci.org/releases/' }
  jcenter()
}

configurations {
  testPlugins {}
}

// Exclude buggy Xalan dependency this way the JRE default TransformerFactory is used
// The xalan pulled in by htmlunit does not properly deal with spaces folder / job names
configurations.all*.exclude group: 'xalan'

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.11'
  compile "org.jenkins-ci.plugins:job-dsl-core:${jobDslVersion}"

  // for the rest task
  compile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.2') {
    exclude(module: 'groovy')
  }
  compile('org.apache.ant:ant:1.9.7')

  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
  testCompile 'cglib:cglib-nodep:2.2.2' // used by Spock

  // Jenkins test harness dependencies
  testCompile('org.jenkins-ci.main:jenkins-test-harness:2.33') {
    exclude group: 'org.netbeans.modules', module: 'org-netbeans-insane' // https://github.com/sheehan/job-dsl-gradle-example/issues/90
  }
  testCompile("org.jenkins-ci.main:jenkins-war:${jenkinsVersion}") {
    exclude group: 'org.jenkins-ci.ui', module: 'bootstrap' // https://github.com/sheehan/job-dsl-gradle-example/issues/87
  }

  // Job DSL plugin including plugin dependencies
  testCompile "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}"
  testCompile "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}@jar"
  testCompile 'org.jenkins-ci.plugins:structs:1.20@jar'
  testCompile 'org.jenkins-ci.plugins:cloudbees-folder:6.9@jar'
  testCompile 'org.jenkins-ci.plugins:script-security:1.68@jar'

// Run the following script in the Script Console of your Jenkins instance to generate
// the above testPlugins list. (adapted from https://git.io/fjpUs)
//  note that I did not install all of these, I merely run './gradlew --info test' and only install the ones that
//  are used for the tests or throw a traceback.
/*
    Jenkins.instance.pluginManager.plugins
        .findAll { !(it.shortName in ['job-dsl', 'structs']) }
        .collect { "testPlugins '${it.manifest.mainAttributes.getValue("Group-Id")}:${it.shortName}:${it.version}'" }
        .sort()
        .each { println it }
 */

// plugins to install in test instance
  testPlugins 'com.coravy.hudson.plugins.github:github:1.31.0'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-cps-global-lib:2.16'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-cps:2.81'
  testPlugins 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.22'
  testPlugins 'org.jenkins-ci.plugins:any-buildstep:0.1'
  testPlugins 'org.jenkins-ci.plugins:build-blocker-plugin:1.7.3'
  testPlugins 'org.jenkins-ci.plugins:cachet-gating:1.0.7'
  testPlugins 'org.jenkins-ci.plugins:cloudbees-folder:6.14'
  testPlugins 'org.jenkins-ci.plugins:credentials:2.3.11'
  testPlugins 'org.jenkins-ci.plugins:cvs:2.14'
  testPlugins 'org.jenkins-ci.plugins:envinject:2.2.0'
  testPlugins 'org.jenkins-ci.plugins:fail-the-build-plugin:1.0'
  testPlugins 'org.jenkins-ci.plugins:flexible-publish:0.15.2'
  testPlugins 'org.jenkins-ci.plugins:ghprb:1.42.0'
  testPlugins 'org.jenkins-ci.plugins:git:4.2.2'
  testPlugins 'org.jenkins-ci.plugins:gradle:1.33'
  testPlugins 'org.jenkins-ci.plugins:groovy:2.2'
  testPlugins 'org.jenkins-ci.plugins:htmlpublisher:1.23'
  testPlugins 'org.jenkins-ci.plugins:jms-messaging:1.1.18'
  testPlugins 'org.jenkins-ci.plugins:mailer:1.32'
  testPlugins 'org.jenkins-ci.plugins:matrix-project:1.17'
  testPlugins 'org.jenkins-ci.plugins:parameterized-trigger:2.35.2'
  testPlugins 'org.jenkins-ci.plugins:progress-bar-column-plugin:1.0'
  testPlugins 'org.jenkins-ci.plugins:ssh-agent:1.17'
  testPlugins 'org.jenkins-ci.plugins:testng-plugin:1.15'
  testPlugins 'org.jenkins-ci.plugins:token-macro:2.12'
  testPlugins 'org.jenkins-ci.plugins:view-job-filters:2.1.1'
  testPlugins 'org.jenkins-ci.plugins:ws-cleanup:0.37'
  testPlugins 'org.jenkins-ci.plugins:ansible:1.0'
  testPlugins 'org.jenkins-ci.plugins:ansicolor:0.6.3'
  testPlugins 'org.jenkins-ci.plugins:build-timeout:1.19'
  testPlugins 'org.jenkins-ci.plugins:github-branch-source:2.8.2'
  testPlugins group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-aggregator', version: '2.6'
}

task resolveTestPlugins(type: Copy) {
  from configurations.testPlugins
  into new File(sourceSets.test.output.resourcesDir, 'test-dependencies')
  include '*.hpi'
  include '*.jpi'
  def mapping = [:]

  doFirst {
    configurations.testPlugins.resolvedConfiguration.resolvedArtifacts.each {
      mapping[it.file.name] = "${it.name}.${it.extension}"
    }
  }
  rename { mapping[it] }

  doLast {
    List<String> baseNames = source*.name.collect {
      mapping[it] }.collect {
        it[0..it.lastIndexOf('.') - 1] }
    new File(destinationDir, 'index').setText(baseNames.join('\n'), 'UTF-8')
  }
}

test {
  dependsOn tasks.resolveTestPlugins
  inputs.files sourceSets.jobs.groovy.srcDirs

  // set build directory for Jenkins test harness, JENKINS-26331
  systemProperty 'buildDirectory', project.buildDir.absolutePath
}

task rest(dependsOn: 'classes', type: JavaExec) {
  main = 'com.dslexample.rest.RestApiScriptRunner'
  classpath = sourceSets.main.runtimeClasspath
  systemProperties System.getProperties()
}

//task wrapper(type: Wrapper) {
//  gradleVersion = '2.9'
//}
